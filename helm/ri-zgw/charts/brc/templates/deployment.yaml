apiVersion: apps/v1
kind: Deployment
metadata:
  name:  {{ .Values.service.name }}
  namespace: {{ .Values.global.namespace}}
  labels:
    {{- include "ri.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas.min }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.31
          command: [ 'sh', '-c', 'echo -e "Checking for the availability of postgres deployment"; while ! nc -z postgres 5432; do sleep 1; printf "-"; done; echo -e "  >> POSTGRES has started";' ]
        - name: {{ .Values.service.name }}-db-create
          image: postgres:latest
          command:
            - bash
            - -c
            - |
              if psql -lqt | cut -d \| -f 1 | grep -qw "$DB_NAME"; then
                echo "Database '$DB_NAME' already exists"
                exit 0
              else
                echo "Creating database '$DB_NAME'"
                createdb $DB_NAME
              fi
          env:
            - name: PGHOST
              value: {{ .Values.global.postgres.service.host }}
            - name: DB_NAME
              value: {{ .Values.database.name }}
            - name: PGPORT
              value: {{.Values.global.postgres.service.port | quote }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretName }}
                  key: {{ .Values.global.postgres.username_key }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretName }}
                  key: {{ .Values.global.postgres.password_key }}
        - name: {{ .Values.service.name }}-init
          image: {{ .Values.service.images.imageRepo}}:{{ .Values.service.images.tag }}
          imagePullPolicy: {{ .Values.config.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: DJANGO_SETTINGS_MODULE
              value: {{.Values.service.name}}.conf.docker
            - name: ALLOWED_HOSTS
              value: {{ .Values.config.host }}
            - name: DB_NAME
              value: {{ .Values.database.name }}
            - name: DB_HOST
              value: {{ .Values.global.postgres.name }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretName }}
                  key: {{ .Values.global.postgres.username_key }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretName }}
                  key: {{ .Values.global.postgres.password_key }}
            - name: {{ .Values.secret.key }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: {{ .Values.secret.key }}
          command: ['sh', '-c', "python3 /app/src/manage.py migrate"]
        - name: {{ .Values.service.name }}-seeder
          image: {{ .Values.global.tokenSeeder.imageRepo}}:{{ .Values.global.tokenSeeder.tag }}
          imagePullPolicy: {{ .Values.global.tokenSeeder.pullPolicy }}
          command: ['sh', '-c', "python3 /app/main.py"]
          env:
            - name: ENV
              value: {{ .Values.config.env }}
            - name: DB_NAME
              value: {{ .Values.database.name }}
            - name: DB_HOST
              value: {{ .Values.global.postgres.name }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretName }}
                  key: {{ .Values.global.postgres.username_key }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretName }}
                  key: {{ .Values.global.postgres.password_key }}
            - name: TOKEN_ISSUER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.tokenIssuer.secretName }}
                  key: {{ .Values.global.tokenIssuer.secretKey }}
            - name: TOKEN_ISSUER_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.tokenIssuer.secretName }}
                  key: {{ .Values.global.tokenIssuer.identifierKey }}
            - name: INTERNAL_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.tokenIssuer.secretName }}
                  key: {{ .Values.global.tokenSeeder.secretKey }}
      containers:
        - name: {{ .Values.service.name }}
          image: {{ .Values.service.images.imageRepo}}:{{ .Values.service.images.tag }}
          imagePullPolicy: {{ .Values.config.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          env:
            - name: BRC_BASE_URL
              value: {{ .Values.config.baseAddress }}
            - name: NOTIFICATIONS_DISABLED
              value: {{ .Values.global.config.notificationsDisabled | quote }}
            - name: REDIS_CACHE
              value: {{ .Values.global.redis.name }}:{{ .Values.global.redis.service.port }}
            - name: DJANGO_SETTINGS_MODULE
              value: {{.Values.service.name}}.conf.docker
            - name: ALLOWED_HOSTS
              value: {{ .Values.config.host }}
            - name: DB_NAME
              value: {{ .Values.database.name }}
            - name: DB_HOST
              value: {{ .Values.global.postgres.name }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretName }}
                  key: {{ .Values.global.postgres.username_key }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgres.secretName }}
                  key: {{ .Values.global.postgres.password_key }}
            - name: {{ .Values.secret.key }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: {{ .Values.secret.key }}
          resources:
            requests:
              memory: "200Mi"
              cpu: "50m"
            limits:
              memory: "400Mi"
              cpu: "200m"
          readinessProbe:
            httpGet:
              path: /
              port: 8000
              httpHeaders:
                - name: Host
                  value: localhost
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 8000
              httpHeaders:
                - name: Host
                  value: localhost
            initialDelaySeconds: 15
            periodSeconds: 30